services:
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      my-network:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:2.4.2
    container_name: tempo
    command: '-config.file /etc/tempo-config.yml'
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo-config.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis:
    container_name: redis
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountdb:
    container_name: account-db
    ports:
      - '3307:3306'
    environment:
      MYSQL_DATABASE: 'account_db'
    extends:
      file: common-config.yml
      service: microservices-database-config

  carddb:
    container_name: card-db
    ports:
      - '3308:3306'
    environment:
      MYSQL_DATABASE: 'card_db'
    extends:
      file: common-config.yml
      service: microservices-database-config

  loandb:
    container_name: loan-db
    ports:
      - '3309:3306'
    environment:
      MYSQL_DATABASE: 'loan_db'
    extends:
      file: common-config.yml
      service: microservices-database-config

# Temporarily disable RabbitMQ server (Spring Cloud Bus) due to low-end PC resources.
# If you want to use Spring Cloud Bus, remove the comments related to RabbitMQ and Spring Cloud Bus service configurations in application.yml.
# Specifically, for services like account, loan, and card services that use Spring Cloud Bus, remove the comments to enable it.
# RabbitMQ consumes a lot of resources, and my current PC configuration is not powerful enough to run it alongside other services.

#  rabbitmq:
#    image: rabbitmq:4.0-management
#    hostname: rabbitmq
#    container_name: rabbit-mq
#    ports:
#      - '5672:5672'
#      - '15672:15672'
#    healthcheck:
#      test: ["CMD-SHELL", "rabbitmq-diagnostics check_port_connectivity || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 10s
#    extends:
#      file: common-config.yml
#      service: network-deploy-service

  configserver:
    image: 'thienan8928/configserver:v1'
    build:
      context: ../configserver
      dockerfile: ../configserver/Dockerfile
    container_name: config-server
    ports:
      - '8083:8083'
#    depends_on:
#      rabbitmq:
#        condition: service_healthy
    healthcheck:
      test: 'curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1'
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      OTEL_SERVICE_NAME: 'configserver'
    extends:
      file: common-config.yml
      service: microservices-base-config

  eurekaserver:
    image: 'thienan8928/eurekaserver:v1'
    build:
      context: ../eurekaserver
      dockerfile: ../eurekaserver/Dockerfile
    container_name: eureka-server
    ports:
      - '8070:8070'
    healthcheck:
      test: 'curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1'
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: 'eurekaserver'
      OTEL_SERVICE_NAME: 'eurekaserver'
    extends:
      file: common-config.yml
      service: microservices-configserver-config

  account:
    image: 'thienan8928/account:v1'
    build:
      context: ../account
      dockerfile: ../account/Dockerfile
    container_name: account
    ports:
      - '8080:8080'
    healthcheck:
      test: 'curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1'
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: 'account'
      SPRING_DATASOURCE_URL: 'jdbc:mysql://accountdb:3306/account_db?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false'
      SPRING_PROFILES_ACTIVE: '${SPRING_PROFILES_ACTIVE:-default}'
      OTEL_SERVICE_NAME: 'account'
    depends_on:
      accountdb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eurekaserver-config

  card:
    image: 'thienan8928/card:v1'
    build:
      context: ../card
      dockerfile: ../card/Dockerfile
    container_name: card
    ports:
      - '8081:8081'
    healthcheck:
      test: 'curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1'
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: 'card'
      SPRING_DATASOURCE_URL: 'jdbc:mysql://carddb:3306/card_db?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false'
      SPRING_PROFILES_ACTIVE: '${SPRING_PROFILES_ACTIVE:-default}'
      OTEL_SERVICE_NAME: 'card'
    depends_on:
      carddb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eurekaserver-config

  loan:
    image: 'thienan8928/loan:v1'
    build:
      context: ../loan
      dockerfile: ../loan/Dockerfile
    container_name: loan
    ports:
      - '8082:8082'
    healthcheck:
      test: 'curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1'
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: 'loan'
      SPRING_DATASOURCE_URL: 'jdbc:mysql://loandb:3306/loan_db?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false'
      SPRING_PROFILES_ACTIVE: '${SPRING_PROFILES_ACTIVE:-default}'
      OTEL_SERVICE_NAME: 'loan'
    depends_on:
      loandb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eurekaserver-config

  gatewayserver:
    image: 'thienan8928/gateway:v1'
    build:
      context: ../gateway
      dockerfile: ../gateway/Dockerfile
    container_name: gatewayserver
    ports:
      - '8072:8072'
    environment:
      SPRING_APPLICATION_NAME: 'gateway'
      SPRING_PROFILES_ACTIVE: '${SPRING_PROFILES_ACTIVE:-default}'
      SPRING_DATA_REDIS_HOST: 'redis'
      OTEL_SERVICE_NAME: 'gateway'
    depends_on:
      account:
        condition: service_healthy
      card:
        condition: service_healthy
      loan:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eurekaserver-config

networks:
  my-network:
    driver: bridge
